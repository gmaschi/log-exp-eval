// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gmaschi/log-exp-eval/internal/services/eval (interfaces: Evaluator)

// Package mockedeval is a generated GoMock package.
package mockedeval

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEvaluator is a mock of Evaluator interface.
type MockEvaluator struct {
	ctrl     *gomock.Controller
	recorder *MockEvaluatorMockRecorder
}

// MockEvaluatorMockRecorder is the mock recorder for MockEvaluator.
type MockEvaluatorMockRecorder struct {
	mock *MockEvaluator
}

// NewMockEvaluator creates a new mock instance.
func NewMockEvaluator(ctrl *gomock.Controller) *MockEvaluator {
	mock := &MockEvaluator{ctrl: ctrl}
	mock.recorder = &MockEvaluatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvaluator) EXPECT() *MockEvaluatorMockRecorder {
	return m.recorder
}

// EvalLogicExp mocks base method.
func (m *MockEvaluator) EvalLogicExp(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EvalLogicExp", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// EvalLogicExp indicates an expected call of EvalLogicExp.
func (mr *MockEvaluatorMockRecorder) EvalLogicExp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvalLogicExp", reflect.TypeOf((*MockEvaluator)(nil).EvalLogicExp), arg0)
}

// IsValidLogicExp mocks base method.
func (m *MockEvaluator) IsValidLogicExp(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidLogicExp", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsValidLogicExp indicates an expected call of IsValidLogicExp.
func (mr *MockEvaluatorMockRecorder) IsValidLogicExp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidLogicExp", reflect.TypeOf((*MockEvaluator)(nil).IsValidLogicExp), arg0)
}
