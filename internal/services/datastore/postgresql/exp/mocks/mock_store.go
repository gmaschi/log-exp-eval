// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gmaschi/log-exp-eval/internal/services/datastore/postgresql/exp (interfaces: Store)

// Package mockedexpstore is a generated GoMock package.
package mockedexpstore

import (
	context "context"
	reflect "reflect"

	expstore "github.com/gmaschi/log-exp-eval/internal/services/datastore/postgresql/exp"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateExpression mocks base method.
func (m *MockStore) CreateExpression(arg0 context.Context, arg1 expstore.CreateExpressionParams) (expstore.Expressions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExpression", arg0, arg1)
	ret0, _ := ret[0].(expstore.Expressions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExpression indicates an expected call of CreateExpression.
func (mr *MockStoreMockRecorder) CreateExpression(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExpression", reflect.TypeOf((*MockStore)(nil).CreateExpression), arg0, arg1)
}

// DeleteExpressionByID mocks base method.
func (m *MockStore) DeleteExpressionByID(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExpressionByID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExpressionByID indicates an expected call of DeleteExpressionByID.
func (mr *MockStoreMockRecorder) DeleteExpressionByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExpressionByID", reflect.TypeOf((*MockStore)(nil).DeleteExpressionByID), arg0, arg1)
}

// GetExpressionByID mocks base method.
func (m *MockStore) GetExpressionByID(arg0 context.Context, arg1 uuid.UUID) (expstore.Expressions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpressionByID", arg0, arg1)
	ret0, _ := ret[0].(expstore.Expressions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpressionByID indicates an expected call of GetExpressionByID.
func (mr *MockStoreMockRecorder) GetExpressionByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpressionByID", reflect.TypeOf((*MockStore)(nil).GetExpressionByID), arg0, arg1)
}

// ListExpressions mocks base method.
func (m *MockStore) ListExpressions(arg0 context.Context) ([]expstore.Expressions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExpressions", arg0)
	ret0, _ := ret[0].([]expstore.Expressions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExpressions indicates an expected call of ListExpressions.
func (mr *MockStoreMockRecorder) ListExpressions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExpressions", reflect.TypeOf((*MockStore)(nil).ListExpressions), arg0)
}

// ListPaginatedExpressions mocks base method.
func (m *MockStore) ListPaginatedExpressions(arg0 context.Context, arg1 expstore.ListPaginatedExpressionsParams) ([]expstore.Expressions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPaginatedExpressions", arg0, arg1)
	ret0, _ := ret[0].([]expstore.Expressions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPaginatedExpressions indicates an expected call of ListPaginatedExpressions.
func (mr *MockStoreMockRecorder) ListPaginatedExpressions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPaginatedExpressions", reflect.TypeOf((*MockStore)(nil).ListPaginatedExpressions), arg0, arg1)
}

// UpdateExpression mocks base method.
func (m *MockStore) UpdateExpression(arg0 context.Context, arg1 expstore.UpdateExpressionParams) (expstore.Expressions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExpression", arg0, arg1)
	ret0, _ := ret[0].(expstore.Expressions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateExpression indicates an expected call of UpdateExpression.
func (mr *MockStoreMockRecorder) UpdateExpression(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExpression", reflect.TypeOf((*MockStore)(nil).UpdateExpression), arg0, arg1)
}
