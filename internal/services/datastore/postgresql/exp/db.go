// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0

package expstore

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createExpressionStmt, err = db.PrepareContext(ctx, createExpression); err != nil {
		return nil, fmt.Errorf("error preparing query CreateExpression: %w", err)
	}
	if q.deleteExpressionByIDStmt, err = db.PrepareContext(ctx, deleteExpressionByID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteExpressionByID: %w", err)
	}
	if q.getExpressionByIDStmt, err = db.PrepareContext(ctx, getExpressionByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetExpressionByID: %w", err)
	}
	if q.listExpressionsStmt, err = db.PrepareContext(ctx, listExpressions); err != nil {
		return nil, fmt.Errorf("error preparing query ListExpressions: %w", err)
	}
	if q.listPaginatedExpressionsStmt, err = db.PrepareContext(ctx, listPaginatedExpressions); err != nil {
		return nil, fmt.Errorf("error preparing query ListPaginatedExpressions: %w", err)
	}
	if q.updateExpressionStmt, err = db.PrepareContext(ctx, updateExpression); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateExpression: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createExpressionStmt != nil {
		if cerr := q.createExpressionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createExpressionStmt: %w", cerr)
		}
	}
	if q.deleteExpressionByIDStmt != nil {
		if cerr := q.deleteExpressionByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteExpressionByIDStmt: %w", cerr)
		}
	}
	if q.getExpressionByIDStmt != nil {
		if cerr := q.getExpressionByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getExpressionByIDStmt: %w", cerr)
		}
	}
	if q.listExpressionsStmt != nil {
		if cerr := q.listExpressionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listExpressionsStmt: %w", cerr)
		}
	}
	if q.listPaginatedExpressionsStmt != nil {
		if cerr := q.listPaginatedExpressionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listPaginatedExpressionsStmt: %w", cerr)
		}
	}
	if q.updateExpressionStmt != nil {
		if cerr := q.updateExpressionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateExpressionStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                           DBTX
	tx                           *sql.Tx
	createExpressionStmt         *sql.Stmt
	deleteExpressionByIDStmt     *sql.Stmt
	getExpressionByIDStmt        *sql.Stmt
	listExpressionsStmt          *sql.Stmt
	listPaginatedExpressionsStmt *sql.Stmt
	updateExpressionStmt         *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                           tx,
		tx:                           tx,
		createExpressionStmt:         q.createExpressionStmt,
		deleteExpressionByIDStmt:     q.deleteExpressionByIDStmt,
		getExpressionByIDStmt:        q.getExpressionByIDStmt,
		listExpressionsStmt:          q.listExpressionsStmt,
		listPaginatedExpressionsStmt: q.listPaginatedExpressionsStmt,
		updateExpressionStmt:         q.updateExpressionStmt,
	}
}
